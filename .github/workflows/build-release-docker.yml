name: Build & Release + Docker

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: Release
  PROJECT_PATH: 'TelegramMonitor/TelegramMonitor.csproj'
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/telegrammonitor

concurrency:
  group: auto-release-${{ github.ref }}
  cancel-in-progress: true

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.ver.outputs.VERSION }}
    steps:
      - id: ver
        shell: bash
        run: |
          VERSION=$(TZ='Asia/Shanghai' date +'%Y.%m.%d.%H%M')
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "$VERSION" > version.txt
      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
          retention-days: 1

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { name: linux-x64,      rid: linux-x64,   arch: amd64, artifact: TelegramMonitor-linux-x64.tar.gz,  pack: "tar -czf" }
          - { name: linux-arm64,    rid: linux-arm64, arch: arm64, artifact: TelegramMonitor-linux-arm64.tar.gz,pack: "tar -czf" }
          - { name: osx-x64,        rid: osx-x64,     arch: osx64, artifact: TelegramMonitor-osx-x64.zip,       pack: "zip -r -q" }
          - { name: osx-arm64,      rid: osx-arm64,   arch: osxarm64, artifact: TelegramMonitor-osx-arm64.zip, pack: "zip -r -q" }
          - { name: windows-x86,    rid: win-x86,     arch: x86, artifact: TelegramMonitor-windows-x86.zip,     pack: "zip -r -q" }
          - { name: windows-x64,    rid: win-x64,     arch: x64, artifact: TelegramMonitor-windows-x64.zip,     pack: "zip -r -q" }
          - { name: windows-arm64,  rid: win-arm64,   arch: arm64, artifact: TelegramMonitor-windows-arm64.zip,pack: "zip -r -q" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Publish
        run: |
          dotnet publish "${{ env.PROJECT_PATH }}" \
            --configuration "$CONFIGURATION" \
            -r "${{ matrix.rid }}" \
            --self-contained true \
            -p:PublishSingleFile=true \
            -o "out/${{ matrix.rid }}"
          find "out/${{ matrix.rid }}" -type f \( -name '*.pdb' -o -name '*.xml' \) -delete
          cd "out/${{ matrix.rid }}"
          ${{ matrix.pack }} "../${{ matrix.artifact }}" .
          cd ../..
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: out/${{ matrix.artifact }}
          retention-days: 3

  release:
    if: github.repository == 'Riniba/TelegramMonitor'
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - id: meta
        run: |
          echo "DATETIME=$(TZ='Asia/Shanghai' date +'%Y年%m月%d日 %H:%M:%S')" >> "$GITHUB_OUTPUT"
          echo "COMMIT_MSG=$(git log -1 --pretty=format:'%s')" >> "$GITHUB_OUTPUT"
      - uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.VERSION }}
          name: "Release ${{ needs.prepare.outputs.VERSION }}"
          body: |
            **发布时间：** ${{ steps.meta.outputs.DATETIME }}  
            **发布者：** ${{ github.actor }}

            **更新内容**  
            ${{ steps.meta.outputs.COMMIT_MSG }}

            Windows (x64 / x86 / ARM64)  
            Linux (x64 / ARM64)  
            macOS (Intel / Apple Silicon)  

            Windows 用户请下载对应系统架构的 zip 文件  
            • 64 位系统：`TelegramMonitor-windows-x64.zip`  
            • 32 位系统：`TelegramMonitor-windows-x86.zip`  
            • ARM64 系统：`TelegramMonitor-windows-arm64.zip`  

            Linux 用户请下载对应架构的 tar.gz 文件  
            • x64 架构：`TelegramMonitor-linux-x64.tar.gz`  
            • ARM64 架构：`TelegramMonitor-linux-arm64.tar.gz`  

            macOS 用户请下载对应架构的 zip 文件  
            • Intel 芯片：`TelegramMonitor-osx-x64.zip`  
            • Apple Silicon：`TelegramMonitor-osx-arm64.zip`
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz

  docker:
    if: github.repository == 'Riniba/TelegramMonitor'
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: out/linux-amd64
      - uses: actions/download-artifact@v4
        with:
          name: linux-arm64
          path: out/linux-arm64
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .
      - run: |
          test -f version.txt
          test -f out/linux-amd64/TelegramMonitor-linux-x64.tar.gz
          test -f out/linux-arm64/TelegramMonitor-linux-arm64.tar.gz
      - id: ver
        run: echo "VERSION=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - run: tar -xzf out/linux-amd64/TelegramMonitor-linux-x64.tar.gz -C out/linux-amd64 --strip-components=1
      - run: tar -xzf out/linux-arm64/TelegramMonitor-linux-arm64.tar.gz -C out/linux-arm64 --strip-components=1
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.ver.outputs.VERSION }}
            type=raw,value=latest
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            BIN_NAME=TelegramMonitor
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
